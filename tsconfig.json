// Visit https://aka.ms/tsconfig.json for all config options
{
  "$schema": "http://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "useDefineForClassFields": true,
    "allowSyntheticDefaultImports": false,
    /**
      Svelte Preprocess cannot figure out whether you have a value or a type, so tell TypeScript
      to enforce using `import type` instead of `import` for Types.

      But also, stop importing types as values because they can't be erased as nicely.
     */
    "importsNotUsedAsValues": "error",
    /**
      TypeScript doesn't know about import usages in the template because it only sees the
      script of a Svelte file. Therefore preserve all value imports. Requires TS 4.5 or higher.
     */
    "preserveValueImports": true,
    /**
      This stops `const enum` from working, but projectsophon linting rules already deny enums.

      Just use normal JavaScript patterns.
    */
    "isolatedModules": true,
    /**
     * Typecheck JS in `.svelte` and `.js` files by default.
     * Disable checkJs if you'd like to use dynamic types in JS.
     * Note that setting allowJs false does not prevent the use
     * of JS in `.svelte` files.
     */
    "allowJs": true,
    "checkJs": true,
    /**
      To have warnings/errors of the Svelte compiler at the correct position,
      enable source maps by default.
     */
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true
  }
}
